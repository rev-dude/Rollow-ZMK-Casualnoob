/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0

#define LAUNCHER (LG(TAB))
#define CTRL_TAB (LC(TAB))
#define C_S_TAB (LC(LS(TAB)))

#define SPC_PREVIOUS (LC(LG(LEFT)))
#define S_PRV SPC_PREVIOUS

#define SPC_NEXT (LC(LG(RIGHT)))
#define S_NXT SPC_NEXT

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

&sk {
  release-after-ms = <2000>;
  quick-release;
};

/ {

  chosen {
    zmk,battery = &vbatt;
    //zmk,matrix_transform = &five_column_transform;
  };

  vbatt: vbatt {
      compatible = "zmk,battery-nrf-vddh";
      label = "VBATT";
  };

  behaviors {
      td0: tap_dance_smart_shift {
          compatible = "zmk,behavior-tap-dance";
          label = "TAP_DANCE_SMART_SHIFT";
          #binding-cells = <0>;
          tapping-term-ms = <175>;
          bindings = <&sk LSHIFT>, <&caps_word>;
      };
      gqt: global-quick-tap {
          compatible = "zmk,behavior-hold-tap";
          label = "GLOBAL_QUICK_TAP";
          #binding-cells = <2>;
          flavor = "tap-preferred";
          tapping-term-ms = <175>;
          quick-tap-ms = <125>;
          global-quick-tap;
          bindings = <&mo>, <&kp>;
      };
  };

  combos {
    compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <40>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_sft {
            timeout-ms = <40>;
            key-positions = <37 38>;
            bindings = <&sk LSHIFT>;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
/* Default
 * .-----------------------------------------.                    .-----------------------------------------.
 * | TAB  |   Q  |   W  |   E  |   R  |   T  |                    |   Y  |   U  |   I  |   O  |   P  | BKSP |
 * |------+------+------+------+------+------|                    |------+------+------+------+------+------|
 * | CTRL |   A  |   S  |   D  |   F  |   G  |                    |   H  |   J  |   K  |   L  |   ;  |   '  |
 * |------+------+------+------+------+------|                    |------+------+------+------+------+------|
 * | SHFT |   Z  |   X  |   C  |   V  |   B  |.-------.   .------.|   N  |   M  |   ,  |   .  |   /  | SHFT |
 * '-----------------------------------------/       /     \      \-----------------------------------------'
 *                          |  GUI |  LWR | / Space /       \ Space\  |TT(RS)| Tab  |
 *                          |      |      |/       /         \      \ |      |      |
 *                          '-------------''------'           '------''-------------'
 *
 *   Encoder Left: Up <-> Down
 *   Encoder Right: Left <-> Right
 */
                        bindings = <
      &none     &kp ESC     &kp W       &kp F       &kp P       &kp B                   &kp J       &kp L       &kp U       &kp Y       &kp UNDER   &none
      &none     &kp R       &kp R       &kp S       &kp T       &kp G                   &kp M       &kp N       &kp E       &kp I       &kp O       &none
      &none     &kp Z       &kp X       &kp C       &kp D       &kp V                   &kp K       &kp H       &kp COMMA   &kp PERIOD  &kp APOS    &none
                                        &none       &kp SPACE   &kp SPACE               &kp SPACE   &kp SPACE   &kp SPACE

                        >;

                        sensor-bindings = <&inc_dec_kp DOWN UP &inc_dec_kp RIGHT LEFT>;
                };

        };
};
